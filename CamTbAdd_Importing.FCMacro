# -*- coding: utf-8 -*-

import CamTbAddLib
from importlib import reload
reload(CamTbAddLib)

from importlib import reload
import naming_rules.ex_naming_rules as ex_rules
reload(ex_rules)
boboxx_rules = ex_rules.BoboxxRules(shape_name='endmill')

# TODO script AND lib & rules versioning!!!!

# --------------------------------------------------------
#FC: ver below HAS attr fix...as shown
    #OS: Debian GNU/Linux 11 (bullseye) (XFCE/xfce)
    #Word size of FreeCAD: 64-bit
    #Version: 0.22.0dev.38429 (Git)
    #Build type: Release
    #Branch: main
    #Hash: 362cf1c80edb89957d81c0dbe6e50ce35daaa6db
    #Python 3.11.9, Qt 5.15.13, Coin 4.0.2, Vtk 9.2.6, OCC 7.7.2
    #Locale: English/Australia (en_AU)

#class ToolBitFactory(object):
    #def CreateFromAttrs(self, attrs, name="ToolBit", path=None):
        #Path.Log.track(attrs, path)
        #obj = Factory.Create(name, attrs["shape"], path)
        #obj.Label = attrs["name"]
        #params = attrs["parameter"]
        #for prop in params:
            #PathUtil.setProperty(obj, prop, params[prop])
        #attributes = attrs["attribute"]
        #for att in attributes:
            #PathUtil.setProperty(obj, att, attributes[att])
# --------------------------------------------------------

# How to cope with other bits:
#     roughing
#     slot drill
#     T slot = slitting saw???
#     PCB drills - v diff rpm/material ...just cutting props
#     PCB corn cutters ...like roughing endmill...need to know, but just dif cutting props

#     One view is still endmills, but WHEN selecting for Op AND get/calc SF need know diff....
#         Name - cannot use as get overridden by rules!!
#         Family/Part not really
#         ...or suggest SpecialUse col/data <<<NEEDS CODE then to carry info/show - eg via rule into name
#             OR just new shape name....and just copy equiv shape in tool lib???

# TODO print FOUND shape_names & tell user if Tool importing/creating shape does not match exactly, including case, will be ignored.
#   if no Diameter prop ...with a number val...tool ignored


slotdrill, pcbdrill, pcbcorncutters - IGNORED
have removed spaces, set names in csv AND file sys all lower case
cannot see other prop in prop bag so????
...JUST LOOK at my code!!!

# TEST tool material from import!!!!

# make Flutes in default creat prop
# any other??   Length, ShankD, ??? all the family/brand/????
# so use methjod to: use tool_prop dict and just auto ID/add vals...
# make the import method = processUserToolInput + use tool_prop
# ...then strip processUserToolInput ... to just populate passed in vars then call above
# ??dict or list??

#NB tool_props CHANGE with diff shape!!!
#just test if key in dict ignore/warn if not
#tool_props: {'shape': 'endmill.fcstd', 'name': 'endmill', 'parameter': {'CuttingEdgeHeight': '30.00 mm', 'Diameter': 8.12, 'Length': '50.00 mm', 'ShankDiameter': '3.00 mm'}, 'attribute': {'Chipload': '0.00 mm', 'Flutes': '0', 'Material': 'HSS', 'SpindleDirection': 'Forward'}}
#13:39:34  	Adding ToolBit Shape: endmill, Dia: 8.12 Name: _28120.0_8.12D_0F_endmill

# default props from csv: cf spreadsheet "toolbit-attributes_extracted from default shapes.ods"
# File MUST not have ANT commas.
# single/double quotes???
file1 = "cutting_tool_data/cuttingtools1.csv"
data_dict = dict()
# Imports csv as LIST of dicts of each row, ie header row cells are dict Keys
data_list = CamTbAddLib.load_data(file1)


for row_dict in data_list:
    # need id ALL desired FC props AND cater if missing!!!
    # print(row_dict['shape'], row_dict['Diameter'], row_dict['ShankDiameter'], row_dict['name'])
    # then use to create ONE TB....
    CamTbAddLib.createToolFromProps(boboxx_rules, row_dict, dbg_print=False)

    # below works, BUT can only set shape, name, dia!!!
    #CamTbAddLib.processUserToolInput(boboxx_rules,
                                    #shape_name = data_dict['shape'],
                                    #tb_base_name = data_dict['shape'],
                                    #tb_base_nr = 20000,
                                    #tb_nr_inc = 100,
                                    #dia = data_dict['Diameter'],
                                    #dia_max = 0,
                                    #dia_inc = 0,
                                    #dbg_print=True)
    #>>>>>TODO TODO +++++ as part of this seperating tool_props from lib!!!
    # ie tool/shape type => property set wich attempt to read...
    # ID some mandatory for each type???
    # If prop NOT mandatory then need default val <> 0 can't have 0 mm for Tool!!!
    # TODO TODO TODO TODO create easy way USER create EACH default TB type
    #   eg 1x py file/type????

# TODO next is massage MANDATORY (how identify - a **v short** list?? {shape, name?, Diameter}) -> toolprops dict format
# +++ user setting/dict/dongxi to REMAP csv col name to MANDATORY name....not req do for non-mandatory... BUT PROB GOOD IDEA TO ALLOW ie NOT restrict!!
# ++add OTHER USER settigns & tag as that in toolprops
# incldes way for user to specify what to add (anything else ignored)



#hmmmm what if user wants import Tool RANGE(s) based on:
    #dia, OAL, CL        ...prob NOT flutes = diff cutting data??
                        #ditto diff material
#ATM approach = define toolprops and create range as per main example code.
#any use allowing import INLCUDING specify a VAR with range???
