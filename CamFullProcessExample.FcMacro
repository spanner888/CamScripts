#!/usr/bin/python3
# -*- coding: utf-8 -*-

# TODO licence/macro info

# TEST code on current stable & doc in macro supported ver info
# FIXME test for odd props like in vbits, ballend etc


# TODO TODO below => CANNOT auto install in AppImage & ???? as it is read only!!
# https://wiki.freecad.org/Material Inheritance....One use case is to provide the ability to tweak models without breaking other documents. For example, in cases where a property type is different, you can define a derived property model that only changes that specific property without breaking any existing documents that reference it. 
   #Inherits:
     #- Density:
       #UUID: '454661e5-265b-4320-8e6f-fcf6223ac3af'
     #- IsotropicLinearElastic:
       #UUID: 'f6f9e48c-b116-4e82-ad7f-3659a9219c50'
# TRY copy BOTH to USERS Materials & Models dirs??? <<<PROB NEED LOOK AT CODE to see how to get locations!!!
    #mm= Materials.ModelManager()
    #>>> mm.ModelLibraries
    #[('System', '/home/spanner888/Documents/_APPSz400/FC_wkly-38459/squashfs-root/usr/share/Mod/Material/Resources/Models', ':/icons/freecad.svg')]

    #>>> matm= Materials.MaterialManager()
    #>>> matm.MaterialLibraries
    #[('System', '/home/spanner888/Documents/_APPSz400/FC_wkly-38459/squashfs-root/usr/share/Mod/Material/Resources/Materials', ':/icons/freecad.svg'), ('User', '/home/spanner888/.local/share/FreeCAD/Material', ':/icons/preferences-general.svg')]
    
    ### NB above shows/implies setting DID NOT SEE IN PREFS!!!!!
    #               alos susggests Models is defaulting to App/usr{share?}/...

#   >>>prefs : CustomMaterialsDir
#   ??does Materials have a first run to set some/CustomMaterialsDir dir??????

#MAYBE addon manager can accept 2nd (macro) path & copy mat/mod...or just resources dir/subs...or dummy a SECOND macro???
# cstom install script in my code somewhere if mod/mat not found???

# ++++remember if pref not set key/s might not exist!!!!!
# >>>test materials wb FIRST run....force new prefs/cfg
#     ....BUT CANNOT SET THE DIR EXISTING BUG??

MaterialEditor.py
        self.directory = get_material_preferred_directory()
        self.save_directory = get_material_preferred_save_directory()
        if self.directory is None:
            self.directory = FreeCAD.getResourceDir() + "Mod/Material"

    def implementModel(self):

        """implements the model with the material attribute structure."""

        p = FreeCAD.ParamGet("User parameter:BaseApp/Preferences/Mod/Material")

above: get_material_preferred_directory() is:
    from materialtools.cardutils import get_material_preferred_directory

    ....
    mat_prefs = FreeCAD.ParamGet("User parameter:BaseApp/Preferences/Mod/Material/Resources")
    use_built_in_materials = mat_prefs.GetBool("UseBuiltInMaterials", True)
    use_mat_from_config_dir = mat_prefs.GetBool("UseMaterialsFromConfigDir", True)
    use_mat_from_custom_dir = mat_prefs.GetBool("UseMaterialsFromCustomDir", True)
    .....
    if use_built_in_materials:      below stripped is not working code!!!
        if category == 'Fluid':  preferred = join(FreeCAD.getResourceDir(), "Mod", "Material", "Resources", "Materials", "FluidMaterial"
        elif category == 'Solid':preferred = join(FreeCAD.getResourceDir(), "Mod", "Material", "Resources", "Materials", "StandardMaterial")
        else:                    preferred = join(FreeCAD.getResourceDir(), "Mod", "Material"
    if use_mat_from_config_dir:  preferred = join(FreeCAD.ConfigGet("UserAppData"), "Material"
    if use_mat_from_custom_dir:  preferred = mat_prefs.GetString("CustomMaterialsDir", "")
    >>ONLY LAST  preferred = val is returned!!!
        ....AND LSAT ONE SET BASED ON what prefs = True!!!
        AND only for user = custom dir, the actual dir must exist, else not set/used!


>>> from materialtools.cardutils import get_material_preferred_directory
>>> get_material_preferred_directory()
'/home/spanner888/Documents/_APPS_lappy/FC_wkly-38495/squashfs-root/appd_mlappy_new/Material'
but still need test if writable ...and yest s'o'flow said best way test is to write...& catch error!!

BUT still Q about add resources/Materials & Models or assume already there??
    ...which have seen many times are NOT for use_mat_from_config_dir



# TODO TODO material model - needs to APPEND to end of existing file. <<<POSS can create SEP COMPLETE model file instead of interferrign with "defualt/prod" file
# TODO TODO material - sample/s CAN be seperate files which can inherit...NB care if using the German materials. ARE they translated in the PR?? 


# TODO TODO make sure create TBs required by: CamFullProcessExample.FcMacro!!!!!!!!
#   make that a create ONCE only - so CHECK if exist first IN CURRENT LIB
# DO /create from CamFullProcessExample ...to extend the end-end features?



# process FIXME, TODO, TEST ++++ ++ sanity

# TODO Package_Metadata AND in each file??
# https://wiki.freecad.org/Std_AddonMgr
# https://wiki.freecad.org/Package_Metadata

# addon mgr wants/requires a FOLDER...to gather icon, licence, readme/help.......
# ...which prob good for me to help org as git repo....
# https://wiki.freecad.org/Std_AddonMgr
# https://wiki.freecad.org/Package_Metadata
# Adding macro to WIKI: https://wiki.freecad.org/Macro_Template
# Adding to Addon Mgr   https://wiki.freecad.org/Add_Workbench_to_Addon_Manager


# TODO TODO TODO CLEARLY MARK EACH EXAMPLE START IN BOTH FILES **and** PRINT "EXAMPLE#+DESC" HEADER IN OUTPUT!!!!
# TODO chk order correct & no steps missing...SHORTEN???
#    USE existing Tool Library tools ...CAM Toobits & add to current/last used
#       all code actually to test the code that does above in bulk<<<SEP promotion of this!!!
#    Create a test document, test shape
#    Set test shape Material to be a Machining material (ATM is POC using SurfaceSpeeds)
#    Create CAM Job & set PostProcessor, Rapids MORE??, settings
#    Apply some CAM cutting Operations to the shape
#    Add specified Tools from Library to Job as ToolControllers
#    Set specified ToolController properties (Feeds & SpindleSpeed)
#    Set each Job Operation to desired ToolController

# TODO chekc if can remove more imports here!!!!
import FreeCAD
import Materials

# Extending JobUtils Lib examples to create complete end-end Job
# allows edited library updates, without close/reopen FC.
from importlib import reload
import CamScriptingLib
reload(CamScriptingLib)

# Scripting Path workbench  https://forum.freecad.org/viewtopic.php?t=33328
import JobUtils

from PySide import QtGui

# --------------------------------------------------------------------------
# USER settings ============================================================
# --------------------------------------------------------------------------
clear_console_pane = True
clear_report_pane = True
print_machinability = False     # Odd size so less likely to clash with existing TB

# ---------------------------------------------------------
# JOB properties & defaults
j_props = CamScriptingLib.job_props()

j_props.jobname = "Job_ju_created"
j_props.postProcessor = "grbl"
j_props.postProcessorArgs = '--no-show-editor --no-comments --bcnc --translate_drill --preamble "G17 G40 G49 G90 G92.1 G94 G54 G21 F200" --postamble "G17 G90 M5 M9 M2"'

# "%D/%d_%j_%O_%T_%t_%S.ngc"
# If document is NOT saved, %D does not know the directory and forces file chooser to open
# So using %M to save to users Macro directory.
j_props.postProcessorOutputFile = "%M/%d_%j_%O_%T_%t_%S.ngc"

# ** CARE default INTERNAL units are per SECOND.
#    This is ONLY for Rapids, not Feeds - again CARE!!
# Not changing mm/s as reminder when working in FreeCAD CAM!!!!
# ** using divide by 60 to make it easier to use common mm/s values.
j_props.hRapid = '400/60 mm/s'
j_props.vRapid = '150/60 mm/s'
# ---------------------------------------------------------

# FIXME make below empty default, then test if empty and prompt user to set!!
# FIXME cross plat ...or get some dir from prefs or???? AND SEARCH ANY MORE spanner888
sanity_report = '/home/spanner888/Documents/cam_sanity/sanity_auto.html'

# JOB-TC & TB properties/defaults.
# Add one set of props for each TC/TB
# Create 2 sets Toolcontroller properties to add
# These require existing ToolBits in the Users Library.
#   tcProps1 is found by using: bitName = "28120.0_8.12D_0F_endmill"
#   tcProps2 is found by using: lib_tool_nr = 26350
# The above Toolbits can be created by running:
#   Example 1, 2 in CamTbAddExample.FCMacro
# ---------------------------------------------------------
tcProps1 = CamScriptingLib.tc_props()

tcProps1.bitName = "28120.0_8.12D_0F_endmill"
# tcProps2.lib_tool_nr =        # Adding this TC by name, not number
tcProps1.hfeed = '200 mm/min'
tcProps1.vfeed = '100 mm/min'

# May overwritten by SpindleSpeed CALCULATED from Stock-material-machinability date
tcProps1.spindleSpeed = 5000.0
# ---------------------------------------------------------
# ---------------------------------------------------------
tcProps2 = CamScriptingLib.tc_props()

tcProps2.bitName = ""
tcProps2.lib_tool_nr = 26350
tcProps2.hfeed = '213 mm/min'
tcProps2.vfeed = '123 mm/min'

# May overwritten by SpindleSpeed CALCULATED from Stock-material-machinability date
tcProps2.spindleSpeed = 5678.9
# ---------------------------------------------------------
# --------------------------------------------------------------------------
# USER settings END ========================================================
# --------------------------------------------------------------------------


# ----------------------------------------
# Output/Documentation helpers
exampleNr = 1
prefix = "JobUtils:"

def printExPrefix(exampleNr, prefix="", ExampleDesc="", topRow=False, bottomRow=False):
    if topRow:
        print("-"*80)
    print("Example", exampleNr, prefix, ExampleDesc, end = ' ')
    exampleNr += 1
    if bottomRow:
        print("-"*80)
    return exampleNr
#----------------------------------------

#---------------------------------------------------------
ExampleDesc="New doc & Job, optionaly clear report/python panes.\n\t\t\t"
exampleNr = printExPrefix(exampleNr, prefix, ExampleDesc, topRow=True, bottomRow=False)
doc, job = CamScriptingLib.initDocJob(j_props, clear_console_pane, clear_report_pane)

ExampleDesc="Add profile operation to specified job.\n\t\t\t"
exampleNr = printExPrefix(exampleNr, prefix, ExampleDesc, topRow=False, bottomRow=False)
profile_op = CamScriptingLib.add_profile_op(job)

ExampleDesc="Add profile operation & Boundary Dressup to specified job.\n\t\t"
exampleNr = printExPrefix(exampleNr, prefix, ExampleDesc, topRow=False, bottomRow=False)
# NOTE: Dia of TC MUST position tool INSIDE the limiting boundary, else no gcode nor message!!
# SEE: JobUtil test_01(): xNeg": 4.0,  # Ensure 2.5mm radius of default 5mm bit ...ditto yNeg prop.
# Can see boundary visualy in FC by making Stock under DressupPathBoundary op visible!!
profile_op1, dressup1 = CamScriptingLib.add_profile_op_with_boundary_dressup(job)
# ---------------------------------------------------------


# ---------------------------------------------------------
ExampleDesc="Add ToolControllers to Job-Tools & desired Operation.\n\t\t"
exampleNr = printExPrefix(exampleNr, prefix, ExampleDesc, topRow=True, bottomRow=False)
toolNames = CamScriptingLib.printAvailableLibraryTools()

# Add Tools into Job as ToolControllers AFTER ALL operations,
#   to avoid script pausing for user input to select desired ToolController.
# This also reduces chance of error, as above sets SAME TC for ALL operations.
tc1 = CamScriptingLib.addTc(job, tcProps1, byNr=False)
print("\tSet profile_op.ToolController to above TC+user scripted settings")
profile_op.ToolController = tc1

tc2 = CamScriptingLib.addTc(job, tcProps2, byNr=True)
print("\tSet profile_op1.ToolController to above TC+user scripted settings")
profile_op1.ToolController = tc2

# recompute document
JobUtils._set_visibility_and_view(doc, job)
JobUtils.FreeCAD.ActiveDocument.recompute()
# ---------------------------------------------------------

# ---------------------------------------------------------
# set some example printing vars & print header for RPM calc example
prefix = "CamScriptingLib:"
ExampleDesc="Machinability & SpindleSpeed RPM calculation:\n\t\t"
exampleNr = printExPrefix(exampleNr, prefix, ExampleDesc, topRow=True, bottomRow=False)

# Get the stock object of desired CAM-Job
stk = doc.getObject("Stock")

# Get HSS & Carbide Surface Speeds.
# Note: Not tested with Material that has no SurfaceSpeedCarbide and SurfaceSpeedHSS
SurfaceSpeedCarbide, SurfaceSpeedHSS = CamScriptingLib.get_mat_machinability(doc, stk, printing=print_machinability)

print("Retrieved Stock Material SurfaceSpeeds & tc1 Diameter\n\
\t\t\tin common base Units of mm/s & mm, to Calculate cutting RPM")
print("\t\tHSS: {}, CBD: {}, TC1 dia: {}"
      .format(SurfaceSpeedHSS, SurfaceSpeedCarbide, tc1.Tool.Diameter))

# CALCULATE & print RPM,
# ONLY for SurfaceSpeed TYPE that matches Tool material type
# ATM Tool material type retreived from ToolController.Tool.Material
# Does not yet apply a new Material to Tools and then use that material type.
rpm = CamScriptingLib.calcRpm(tc1, SurfaceSpeedCarbide, SurfaceSpeedHSS)
# ---------------------------------------------------------


# ---------------------------------------------------------
# set some example printing vars & print header for
#   Sanity report and postprocess/save gcode example
ExampleDesc="Create & save: CAM Sanity check report & Postprocessed gcode.\n\t\t"
exampleNr = printExPrefix(exampleNr, prefix, ExampleDesc, topRow=True, bottomRow=False)

CamScriptingLib.saveSanityreport(job, sanity_report)

CamScriptingLib.postProcSaveGcode(job.PostProcessorOutputFile)

# print trailing "line" to complete block outline of this example.
print("-"*80)
print("CamFullProcessExample.FcMacro finished.")
# ---------------------------------------------------------
