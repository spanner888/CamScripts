# -*- coding: utf-8 -*-






# NEXT try match one set new/old rules & match both OUTPUT names!!!
#if OK. clean up code, then more more tests as per fixmes & todos!!!




# LICENSE: LGPL-2.1
# need specify Copyright?? eg:Copyright (c) 2023 Russell Johnson (russ4262) <russ4262@gmail.com>
# YES: https://www.gnu.org/licenses/old-licenses/lgpl-2.1.html#SEC4


# allow edited library updates, without close/reopen FC.
import CamTbAddLib
from importlib import reload
reload(CamTbAddLib)

# Code derived from or inspired by:
# FC sliptonic: toolbit-attributes.py & several more CAM-Path modules
# russ JobUtils and related FC changes
# FreeCAD forum users & developers:
#   russ/sliptonic/imm/onekk

# DESC Create ToolBits from definitions or import csv. Add to CAM Tool Library
# Details and how to use in README.MD
# Flexible rule based TB names auto derived from selected TB properties
#   Any Tool property in specified order, with pre/post seperators and Abbreviations/Units
# LIMITATION: If you duplicate and order# in a second item, it will NOT show in TB name.
# Rules "debug mode" pass in dbg_print=True and prnted to console are:
#   toolprops and ordered list of rules WITH order >0.

# TEST all empty combos of tb_XXXX, missing Dia...=default??

# TODO make "shape_name"  in def processUserToolInput(ex_rules.ex1_naming_rules, shape_name....
# be str for ONE shape or LIST for many shapes

#    so add default tb_naming_rules FOR EVERY FC DEFAULT SHAPE in the lib, ALL WITH ORDER#=0 <<< sep rules file!!!
# TODO TODO really showcase TB sev Shape types & sev NAME RULES
            ## maybe auto create with Range of Flutes....
            ## ++bulk import

# TODO: add ???My numbering & if NOT used @ beginnning, then NO leading seperator.


#FIXME  so...make sure the full cam example can use created Tb AND CALC RPM!!!!
#...need have TB name/# = expected!!!
#CHANGE here or THERE
#tcProps1.bitName = "880_em"
#tcProps2.lib_tool_nr = 20840

# tb_name_templ = CamTbAddLib.get_tb_name_template(tb_naming_rules)
# print("boboxx tool name convention:\n2F-D6.35-L31.076")
# print(tb_name_templ)

# TODO  import tools & bulk create tb & add to current library >>STARTED IN:CamTbAdd_TESTING.FCMacro
# TODO  option to add TC-tb to JobX

from importlib import reload
import naming_rules.ex_naming_rules as ex_rules
reload(ex_rules)

# create a naming rules object with DESIRED rules
# FIXME FIXME 1 - why "restrict" rules to ONE shape type, thus forcing user to duplciate rule clsses/sets???
tb_class_naming_rules = ex_rules.Ex1Rules(shape_name='endmill')

# ??Three examples on adding a Default, One or a list of Tools to current Library.
# -----------------------------------------------------------------------
print("Example 1. Add single example default endmill to current Library.")
CamTbAddLib.processUserToolInput(ex_rules.ex1_naming_rules, dbg_print=False)
CamTbAddLib.processUserToolInput(tb_class_naming_rules, dbg_print=False)
CamTbAddLib.processUserToolInput(ex_rules.exagerated_naming_rules)
print("\t...Example 1 finished.\n")
# -----------------------------------------------------------------------


# -----------------------------------------------------------------------
print("Example 2. Add SINGLE Tool 6.35 mm dia to current library, shows all settings")
CamTbAddLib.processUserToolInput(ex_rules.ex1_naming_rules,
                                shape_name = "endmill",
                                tb_base_name = "em",
                                tb_base_nr = 20000,
                                tb_nr_inc = 100,
                                dia = 6.35,
                                dia_max = 0,
                                dia_inc = 0)
print("\t...Example 2 finished.\n")
# -----------------------------------------------------------------------


# -----------------------------------------------------------------------
print("Example 3. Create many tools: dia to dia_max, increment dia_inc")
#   But only If BOTH dia_max & dia_inc are greater than zero,
#            Else: ONLY create ONE TB of this dia in current library.
CamTbAddLib.processUserToolInput(ex_rules.ex1_naming_rules,
                                shape_name = "endmill",
                                tb_base_name = "em",
                                tb_base_nr = 20000,
                                tb_nr_inc = 100,
                                dia = 8.2,
                                dia_max = 9.0,
                                dia_inc = 0.2)
print("\t...Example 3 finished.\n")
# -----------------------------------------------------------------------


# -----------------------------------------------------------------------
print("Example 4. For EVERY Tool Shape SINGLE Tool 3.125 mm dia to current library")
shapeDir, shape_names = CamTbAddLib.getDefaultShapes()
for s in shape_names:
    CamTbAddLib.processUserToolInput(ex_rules.ex1_naming_rules,
                                    shape_name = s,
                                    tb_base_name = s + "_example",
                                    tb_base_nr = 20000,
                                    tb_nr_inc = 100,
                                    dia = 3.125,
                                    dia_max = 3.5,
                                    dia_inc = 0.125)
print("\t...Example 4 finished.\n")
# -----------------------------------------------------------------------


# -----------------------------------------------------------------------
print("Example 5. User boboxx Example: 2F-D6.35-L31.076, FC issue:12823")
import naming_rules.boboxx_naming_rules as boboxx
boboxx_rules = ex_rules.BoboxxRules(shape_name='endmill')

CamTbAddLib.processUserToolInput(boboxx.boboxx_naming_rules)
CamTbAddLib.processUserToolInput(boboxx_rules)

print("\t...Example 5 finished.\n")
# -----------------------------------------------------------------------

print("")
print("CamTbAddLibExample.FcMacro finished.\n")

